#!/usr/bin/env ruby

require 'bundler/setup'

require 'benchmark/ips'
require 'benchmark/memory'

require 'colordom'
require 'camalian'
require 'colorscore'
require 'miro'

COUNT = 5
IMAGE = File.join(__dir__, '..', 'samples/sample.png')

def miro(method)
  Miro.options[:color_count] = COUNT
  Miro.options[:method] = method

  colors = Miro::DominantColors.new(IMAGE)
  colors.to_hex
end

def colorscore
  histogram = Colorscore::Histogram.new(IMAGE, COUNT)
  histogram.colors
end

def camalian(quant)
  img = Camalian::load(IMAGE)
  img.prominent_colors(COUNT, quantization: quant)
end

reports = lambda do |x|
  x.report('colordom (HST)') do
    Colordom.histogram(IMAGE, COUNT)
  end

  x.report('colordom (MCQ)') do
    Colordom.mediancut(IMAGE, COUNT)
  end

  x.report('colordom (KMS)') do
    Colordom.kmeans(IMAGE, COUNT)
  end

  x.report('colorscore (HST)') do
    colorscore
  end

  x.report('miro (HST)') do
    miro('histogram')
  end

  x.report('miro (PXG)') do
    miro('pixel_group')
  end

  x.report('camalian (HST)') do
    camalian(Camalian::QUANTIZATION_HISTOGRAM)
  end

  x.report('camalian (MCQ)') do
    camalian(Camalian::QUANTIZATION_MEDIAN_CUT)
  end

  x.report('camalian (KMS)') do
    camalian(Camalian::QUANTIZATION_K_MEANS)
  end
end

Benchmark.ips do |x|
  reports.call(x)
  x.compare!
end

Benchmark.memory do |x|
  reports.call(x)
  x.compare!
end
